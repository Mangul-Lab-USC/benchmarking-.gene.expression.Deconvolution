willcox.test
wilcox.test()
?wilcox.test()
wilcox.test(x=c(1,2,3,4),y=c(5,6,7,8))
library(EnsDb.HSapiens.v86)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
library(EnsDb.Hsapiens.v86)
hsens=EnsDb.Hsapiens.v86
my.symbols <- c("ANKRD62P1-PARP4P3")
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
MySymbols = read.table("../Desktop/Benchmarking/Workspace/Data/SignatureLists/GeneListToConvert.txt")
my.symbols = as.list(MySymbols)
View(my.symbols)
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
hsens
View(hsens)
?hsens
?EnsDb.HSapiens.v86
??EnsDb.HSapiens.v86
hsens[tables]
hsens[2]
hsens[[2]]
hsens.tables
hsens.tables()
hsens@tables[["entrezgene"]]
hsens@tables["entrezgene"]
hsens@tables[["entrezgene"]]
listTables(EnsDb.Hsapiens.v86)
genes()
genes(hens)
genes(hsens)
genes(hsens, columns = c(listColumns(hsens,"gene"), "entresid"))
genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
output = genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
View(output)
View(output)
output@seqnames
output@seqnames@values
genes(hsens)
output = genes(hsens)
View(output)
output = genes(hsens, return.type = "data.frame")
View(output)
convTable = hsens[c(gene_name,entrezid)]
convTable = hsens[c(gene_name,entrezid),]
convTable = hsens[c("gene_name","entrezid"),]
convTable = hsens[c("gene_name","entrezid")]
output[2]
output[2,10]
output[2,11]
output[2,9]
output[c(2,9)]
output[c(9,10)]
convTable = output[c(9,10)]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
View(convTable)
convTable[2]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
convTable[3] = unlist(convTable[2])
typeof(convTable[2])
unlist(convTable[2])
UNlisted = unlist(convTable[2])
row.names(convTable)
View(convTable)
as.matrix(convTable)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt"
)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt", sep = "\t")
install.packages(ComICS)
BiocLite("ComICS")
install.packages("ComICS")
dcq
library(ComICS
)
library(ComICS)
dcq()
?dcq
load("../Desktop/EPIC-master/data/TRef.rda")
View(TRef)
TRef
install.packages("devtools")
?install_github
?install_github()
library(devtools)
?install_github()
t.test()
?t.test()
1:19
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv")
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, row.names = 1)
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = '\T')
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = '\T')
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "/t"
)
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "\t")
mytable = read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "\t")
View(mytable)
mytable$Tool == "Cibersort"
mytable$Tool
myTable[mytable$Tool == "Cibersort",]
mytable[mytable$Tool == "Cibersort",]
mytable[,mytable$Tool == "Cibersort"]
mytable[mytable$Tool == "Cibersort",]
mytable[mytable$Tool == "Cibersort",]$Prediction
wilcoxon.test
wilcox.test()
?wilcox.test
for (i in 1:dim(mytable)[1])
print(i)
for (i in 1:dim(mytable)[2])
print(i)
for (i in 5:dim(mytable)[2])
)
for (i in c(1,2,3,4)){
print(i)}
for (i in 1:4)){print(i)}
for (i in 1:4){print(mytable[i])}
mytable[,5]
View(mytable)
Cibersort = mytable[mytable$Tool == "Cibersort"]
Cibersort = mytable[mytable$Tool == "Cibersort",]
yes = mytable[mytable$Tool == "Cibersort",]
no = mytable[mytable$Tool == "GEDIT",]
for i in (5:6){print(i)}
for (i in (5:6)){print(i)}
for (i in (5:6)){wilcox.test(yes[,i],no[,i])}
setwd("../Desktop/Benchmarking/Analysis/FindBestRefs/3Unroll/")
MakeTable1Tool = function(toolName,DataMatrix){                                                                                                                                 justTool = DataMatrix[DataMatrix$Tool == toolName,]                                                                                                                         refNames = names(which(table(justTool[,2]) > 0))                                                                                                                            corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",paste(toolName,"corr",sep ="_"))
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}
return(corMat)}
MakeTableAllTools = function(AllPredictions){
toolList = names(table(AllPredictions[,1]))
outMat = MakeTable1Tool(toolList[1],AllPredictions)
for (i in 2:length(toolList)){
nextMat = MakeTable1Tool(toolList[i],AllPredictions)
outMat = merge(outMat,nextMat, by="RefMat", all = T)
}
finalMat = outMat[2:dim(outMat)[2]]
row.names(finalMat) = outMat[,1]
return(finalMat)}
DataCellMix = read.table("Unrolled_CellMix.tsv", header = TRUE, sep = "\t")
DataPBMC = read.table("Unrolled_AllPBMC.tsv", header = TRUE, sep = "\t")
DataStromal = read.table("Unrolled_Stromal.tsv", header = TRUE, sep = "\t")
DataFram = read.table("Unrolled_Fram.tsv", header = TRUE, sep = "\t")
CorrCellMix = MakeTableAllTools(DataCellMix)
CorrPBMC = MakeTableAllTools(DataPBMC)
CorrStromal = MakeTableAllTools(DataStromal)
CorrFram = MakeTableAllTools(DataFram)
MakeTable1Tool = function(toolName,DataMatrix){                                                                                                                                 justTool = DataMatrix[DataMatrix$Tool == toolName,]                                                                                                                         refNames = names(which(table(justTool[,2]) > 0))                                                                                                                            corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",paste(toolName,"corr",sep ="_"))
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}
return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){                                                                                                                                 justTool = DataMatrix[DataMatrix$Tool == toolName,]                                                                                                                         refNames = names(which(table(justTool[,2]) > 0))                                                                                                                            corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",paste(toolName,"corr",sep ="_"))
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}                                                                                                                              return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){                         justTool = DataMatrix[DataMatrix$Tool == toolName,]                refNames = names(which(table(justTool[,2]) > 0))                   corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",paste(toolName,"corr",sep ="_"))
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}                                                                                                                              return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){                         justTool = DataMatrix[DataMatrix$Tool == toolName,]                refNames = names(which(table(justTool[,2]) > 0))                   corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",paste(toolName,"corr",sep ="_"))
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}                     return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){                         justTool = DataMatrix[DataMatrix$Tool == toolName,]                refNames = names(which(table(justTool[,2]) > 0))                   corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat")
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}                     return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){                         justTool = DataMatrix[DataMatrix$Tool == toolName,]                refNames = names(which(table(justTool[,2]) > 0))                   corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",toolName)
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}                     return(corMat)}
MakeTable1Tool = function(toolName,DataMatrix){
justTool=DataMatrix[DataMatrix$Tool == toolName,]
refNames = names(which(table(justTool[,2]) > 0))
corMat = data.frame(refNames)
corMat[,2] = 0
names(corMat) = c("RefMat",toolName)
for (i in 1:length(refNames)){
relData = justTool[justTool$Reference==refNames[i],]
corMat[i,2] = cor(relData[,5],relData[,6])}
return(corMat)}
View(MakeTable1Tool)
AllPredictions = DataCellMix
toolList = names(table(AllPredictions[,1]))
outMat = MakeTable1Tool(toolList[1],AllPredictions)
for (i in 2:length(toolList)){
nextMat = MakeTable1Tool(toolList[i],AllPredictions)
outMat = merge(outMat,nextMat, by="RefMat", all = T)}
View(outMat)
finalMat = outMat[2:dim(outMat)[2]]
View(finalMat)
outMat[1]
outMat[1,]
outMat[,1]
outMat[1]
outMat[,1]
unlist(outMat[,1])
row.names(finalMat) = outMat[,1]
View(finalMat)
AllPredictions = DataCellMix
CellTypes = names(table(AllPredictions))
CellTypes = names(table(AllPredictions$CellType))
i = 1
paste("CorrsByCT/", CellTypes[i], ".tsv",sep = "")
CellTypes = names(table(AllPredictions$CellType))
for i in (1:dim(CellTypes)){
dim(CellTypes)
len(CellTypes)
length(CellTypes)
View(AllPredictions)
