willcox.test
wilcox.test()
?wilcox.test()
wilcox.test(x=c(1,2,3,4),y=c(5,6,7,8))
library(EnsDb.HSapiens.v86)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
library(EnsDb.Hsapiens.v86)
hsens=EnsDb.Hsapiens.v86
my.symbols <- c("ANKRD62P1-PARP4P3")
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
MySymbols = read.table("../Desktop/Benchmarking/Workspace/Data/SignatureLists/GeneListToConvert.txt")
my.symbols = as.list(MySymbols)
View(my.symbols)
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
hsens
View(hsens)
?hsens
?EnsDb.HSapiens.v86
??EnsDb.HSapiens.v86
hsens[tables]
hsens[2]
hsens[[2]]
hsens.tables
hsens.tables()
hsens@tables[["entrezgene"]]
hsens@tables["entrezgene"]
hsens@tables[["entrezgene"]]
listTables(EnsDb.Hsapiens.v86)
genes()
genes(hens)
genes(hsens)
genes(hsens, columns = c(listColumns(hsens,"gene"), "entresid"))
genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
output = genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
View(output)
View(output)
output@seqnames
output@seqnames@values
genes(hsens)
output = genes(hsens)
View(output)
output = genes(hsens, return.type = "data.frame")
View(output)
convTable = hsens[c(gene_name,entrezid)]
convTable = hsens[c(gene_name,entrezid),]
convTable = hsens[c("gene_name","entrezid"),]
convTable = hsens[c("gene_name","entrezid")]
output[2]
output[2,10]
output[2,11]
output[2,9]
output[c(2,9)]
output[c(9,10)]
convTable = output[c(9,10)]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
View(convTable)
convTable[2]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
convTable[3] = unlist(convTable[2])
typeof(convTable[2])
unlist(convTable[2])
UNlisted = unlist(convTable[2])
row.names(convTable)
View(convTable)
as.matrix(convTable)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt"
)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt", sep = "\t")
install.packages(ComICS)
BiocLite("ComICS")
install.packages("ComICS")
dcq
library(ComICS
)
library(ComICS)
dcq()
?dcq
load("../Desktop/EPIC-master/data/TRef.rda")
View(TRef)
TRef
install.packages("devtools")
?install_github
?install_github()
library(devtools)
?install_github()
setwd("../Desktop/Benchmarking/Analysis/AllPredictions/4NormAndUnroll/")
ls
FramCorrs = read.table("FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
View(FramErrors)
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
library(gplots)
library(ggplot)
library(ggplot2)
heatmap.2(FramErrors)
heatmap.2(as.matrix(FramErrors))
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors))
library(RColorBrewer)
library(RColorBrewer)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Blues"), trace = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Blues"), trace = "none")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Blues"), trace = "none", cellnote = round(as.matrix(FramErrors),2))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Blues"), trace = "none")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Blues"), trace = "none", cellnote = round(as.matrix(FramErrors),2))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds"), trace = "none", cellnote = round(as.matrix(FramErrors),2))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds"), trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
png(500,500)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
dev.off()
png("mypng.png",500,500)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
dev.off()
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
setwd("../../NaturalRefsOnly/4NormAndUnroll/")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", dendrogram = "none")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", dendrogram = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", RowV = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", RowV = FALSE, ColV = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", RowV = FALSE, ColV = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black")
par(mar = c(10,10))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(10,10))
FramErrors = read.table("ErrorTables/FramCorrs.tsv", header = TRUE, row.names =1, sep = "\t")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(10,10))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,6))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,7))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,8))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9))
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), legend = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), key = FALSE)
FramCorrs = read.table("CorrelationTables/FramNormCorrs.tsv", header = TRUE, row.names = 1, sep = "\t")
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), key = FALSE)
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE)
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE, RowV = False, ColV= FALSE)
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE, RowV = FALSE, ColV= FALSE)
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, Colv= FALSE)
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, Colv= FALSE, main = "Correlations on Framingham Data")
heatmap.2(as.matrix(FramCorrs), col = brewer.pal(9,"Blues")[1:8], trace = "none", cellnote = round(as.matrix(FramCorrs),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, Colv= FALSE, main = "Correlations on Fram Data")
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, colV = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, Colv = FALSE)
heatmap.2(as.matrix(FramErrors), col = brewer.pal(9,"Reds")[1:8], trace = "none", cellnote = round(as.matrix(FramErrors),2), notecol = "black", mar=c(6,9), key = FALSE, Rowv = FALSE, Colv = FALSE, main = "Errors on Fram Data")
save.image("C:/Users/brian/OneDrive/Desktop/Benchmarking/Analysis/NaturalRefsOnly/4NormAndUnroll/makeHMs.RData")
