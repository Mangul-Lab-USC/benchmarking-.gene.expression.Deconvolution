willcox.test
wilcox.test()
?wilcox.test()
wilcox.test(x=c(1,2,3,4),y=c(5,6,7,8))
library(EnsDb.HSapiens.v86)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
library(EnsDb.Hsapiens.v86)
hsens=EnsDb.Hsapiens.v86
my.symbols <- c("ANKRD62P1-PARP4P3")
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
MySymbols = read.table("../Desktop/Benchmarking/Workspace/Data/SignatureLists/GeneListToConvert.txt")
my.symbols = as.list(MySymbols)
View(my.symbols)
select(hsens,
keys = my.symbols,
columns = c("ENTREZID", "SYMBOL", "GENEID"),
keytype = "SYMBOL")
hsens
View(hsens)
?hsens
?EnsDb.HSapiens.v86
??EnsDb.HSapiens.v86
hsens[tables]
hsens[2]
hsens[[2]]
hsens.tables
hsens.tables()
hsens@tables[["entrezgene"]]
hsens@tables["entrezgene"]
hsens@tables[["entrezgene"]]
listTables(EnsDb.Hsapiens.v86)
genes()
genes(hens)
genes(hsens)
genes(hsens, columns = c(listColumns(hsens,"gene"), "entresid"))
genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
output = genes(hsens, columns = c(listColumns(hsens,"gene"), "entrezid"))
View(output)
View(output)
output@seqnames
output@seqnames@values
genes(hsens)
output = genes(hsens)
View(output)
output = genes(hsens, return.type = "data.frame")
View(output)
convTable = hsens[c(gene_name,entrezid)]
convTable = hsens[c(gene_name,entrezid),]
convTable = hsens[c("gene_name","entrezid"),]
convTable = hsens[c("gene_name","entrezid")]
output[2]
output[2,10]
output[2,11]
output[2,9]
output[c(2,9)]
output[c(9,10)]
convTable = output[c(9,10)]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
View(convTable)
convTable[2]
write.table(convTable, file = "../Desktop/Benchmarking/Workspace/Data/SignatureLists/ConvTable.tsv")
convTable[3] = unlist(convTable[2])
typeof(convTable[2])
unlist(convTable[2])
UNlisted = unlist(convTable[2])
row.names(convTable)
View(convTable)
as.matrix(convTable)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt"
)
write.table(as.matrix(convTable), file = "../Desktop/Test.txt", sep = "\t")
install.packages(ComICS)
BiocLite("ComICS")
install.packages("ComICS")
dcq
library(ComICS
)
library(ComICS)
dcq()
?dcq
load("../Desktop/EPIC-master/data/TRef.rda")
View(TRef)
TRef
install.packages("devtools")
?install_github
?install_github()
library(devtools)
?install_github()
t.test()
?t.test()
1:19
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv")
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, row.names = 1)
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = '\T')
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = '\T')
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "/t"
)
read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "\t")
mytable = read.table("../Desktop/Benchmarking/Analysis/AllPredictions/3Unroll/Unrolled_PBMC1.tsv", header = TRUE, sep = "\t")
View(mytable)
mytable$Tool == "Cibersort"
mytable$Tool
myTable[mytable$Tool == "Cibersort",]
mytable[mytable$Tool == "Cibersort",]
mytable[,mytable$Tool == "Cibersort"]
mytable[mytable$Tool == "Cibersort",]
mytable[mytable$Tool == "Cibersort",]$Prediction
wilcoxon.test
wilcox.test()
?wilcox.test
for (i in 1:dim(mytable)[1])
print(i)
for (i in 1:dim(mytable)[2])
print(i)
for (i in 5:dim(mytable)[2])
)
for (i in c(1,2,3,4)){
print(i)}
for (i in 1:4)){print(i)}
for (i in 1:4){print(mytable[i])}
mytable[,5]
View(mytable)
Cibersort = mytable[mytable$Tool == "Cibersort"]
Cibersort = mytable[mytable$Tool == "Cibersort",]
yes = mytable[mytable$Tool == "Cibersort",]
no = mytable[mytable$Tool == "GEDIT",]
for i in (5:6){print(i)}
for (i in (5:6)){print(i)}
for (i in (5:6)){wilcox.test(yes[,i],no[,i])}
remove.packages("gplots")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library("getDEE2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library("getDEE2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("getDEE2")
library("getDEE2")
mdat = getDEE2Metadata("hsapiens")
View(mdat)
PassOnly = mdat$QC_summary == "PASS"
PassOnly = mdat[mdat$QC_summary == "PASS"]
PassOnly = mdat[mdat$QC_summary == "PASS",]
View(mdat)
View(PassOnly)
SRRc = as.vector(PassOnly$SRR_accession)
all = getDEE2(species="hsapiens",SRRvec = SRRc, etadata = PassOnly, lecacy = TRUE)
all = getDEE2(species="hsapiens",SRRvec = SRRc, etadata = PassOnly, legacy = TRUE)
SRRc[1]
SRRc[1]
all = getDEE2(species="hsapiens",SRRvec = SRRc[1], etadata = PassOnly, legacy = TRUE)
View(all)
all$GeneCounts
FirstGC = all$GeneCounts
View(FirstGC)
GSE50244.bulk.eset = readRDS('https://xuranw.github.io/MuSiC/data/GSE50244bulkeset.rds')
setwd("../Desktop/Benchmarking/Analysis/BestRefOnly/")
setwd("3Unroll/")
library(ggplot2)
library(gplots)
library(dplyr)
DataCellMix = read.table("Unrolled_Normed_CellMix.tsv", header = TRUE, sep = "\t")
DataPBMC = read.table("Unrolled_Normed_AllPBMC.tsv", header = TRUE, sep = "\t")
DataStromal = read.table("Unrolled_Normed_Stromal.tsv", header = TRUE, sep = "\t")
DataFram = read.table("Unrolled_Normed_Fram.tsv", header = TRUE, sep = "\t")
MakeSummTable = function(Data){
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), err = mean(Error))
return(SumTable)}
MakePRPlotGTool = function(SumTable)
{ggplot(SumTable, aes(Tool,err)) + geom_pointrange(aes(ymin=err-sd, ymax = err+sd, color = CellType, y = err), position = position_dodge(0.5))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
MakePRPlotGCT = function(SumTable)
{ggplot(SumTable, aes(CellType,err)) + geom_pointrange(aes(ymin=err-sd, ymax = err+sd, color = Tool, y = err), position = position_dodge(0.7)) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
SCM = MakeSummTable(DataCellMix)
SPBMC = MakeSummTable(DataPBMC)
SStromal = MakeSummTable(DataStromal)
SFram = MakeSummTable(DataFram)
DataCellMix = read.table("Unrolled_Normed_CellMix.tsv", header = TRUE, sep = "\t")
DataPBMC = read.table("Unrolled_Normed_AllPBMC.tsv", header = TRUE, sep = "\t")
DataStromal = read.table("Unrolled_Normed_Stromal.tsv", header = TRUE, sep = "\t")
DataFram = read.table("Unrolled_Normed_Fram.tsv", header = TRUE, sep = "\t")
setwd("../4NormAndUnroll/")
DataCellMix = read.table("Unrolled_Normed_CellMix.tsv", header = TRUE, sep = "\t")
DataPBMC = read.table("Unrolled_Normed_AllPBMC.tsv", header = TRUE, sep = "\t")
DataStromal = read.table("Unrolled_Normed_Stromal.tsv", header = TRUE, sep = "\t")
DataFram = read.table("Unrolled_Normed_Fram.tsv", header = TRUE, sep = "\t")
MakeSummTable = function(Data){
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), err = mean(Error))
return(SumTable)}
MakePRPlotGTool = function(SumTable)
{ggplot(SumTable, aes(Tool,err)) + geom_pointrange(aes(ymin=err-sd, ymax = err+sd, color = CellType, y = err), position = position_dodge(0.5))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
MakePRPlotGCT = function(SumTable)
{ggplot(SumTable, aes(CellType,err)) + geom_pointrange(aes(ymin=err-sd, ymax = err+sd, color = Tool, y = err), position = position_dodge(0.7)) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
SCM = MakeSummTable(DataCellMix)
SPBMC = MakeSummTable(DataPBMC)
SStromal = MakeSummTable(DataStromal)
SFram = MakeSummTable(DataFram)
View(SFram)
SFram$Tool = as.factor(SFram$Tool)
SFram$CellType = as.factor(SFram$CellType)
MakePRPlotGTool(SCM)
MakePRPlotGTool(SPBMC)
?geom_pointrange
Data = DataFram
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), err = mean(Error))
View(Data)
View(SumTable)
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), thrd = quantile(Error)[3])
View(SumTable)
quantile(Data$Error)
quantile(Data$Error)[3]
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), frst = quantile(Error)[2],thrd = quantile(Error)[4])
quantile(Data$Error)
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), frst = quantile(Error)[2],thrd = quantile(Error)[4])
quantile(Data$Error)[2]
View(MakePRPlotGTool)
?quartile
?quantile
quantile(Data$Error, probs = c(.1))
quantile(Data$Error, probs = c(.9))
MakePRPlotGCT = function(SumTable, linewd, fat, siz)
{ggplot(SumTable, aes(CellType,Error)) +
geom_pointrange(aes(ymin=bot, ymax = top, color = Tool, y = Error, lwd = linewd, size = siz), fatten = fat, position = position_dodge(0.7)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
MakePRPlotGCT(SCM, .01,1,1)
MakePRPlotGCT = function(SumTable, linewd, fat, siz)
{ggplot(SumTable, aes(CellType,Error)) +
geom_pointrange(aes(ymin=bot, ymax = top, color = Tool, y = Error, lwd = linewd, size = siz), fatten = fat, position = position_dodge(0.7)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
MakePRPlotGCT(SCM, .01,1,1)
MakePRPlotGCT = function(SumTable, linewd, fat, siz)
{ggplot(SumTable, aes(CellType,Error)) +
geom_pointrange(aes(ymin=bot, ymax = top, color = Tool, y = Error, lwd = linewd), fatten = fat, position = position_dodge(0.7)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
MakePRPlotGCT(SCM, .01,1)
DataCellMix = read.table("Unrolled_Normed_CellMix.tsv", header = TRUE, sep = "\t")
DataPBMC = read.table("Unrolled_Normed_AllPBMC.tsv", header = TRUE, sep = "\t")
DataStromal = read.table("Unrolled_Normed_Stromal.tsv", header = TRUE, sep = "\t")
DataFram = read.table("Unrolled_Normed_Fram.tsv", header = TRUE, sep = "\t")
MakeSummTable = function(Data){
SumTable = Data %>% group_by(Tool, CellType) %>% summarize( sd = sd(Error), bot = quantile(Error,probs = .1)[1],top = quantile(Error,probs = .9)[1], Error = mean(Error))
return(SumTable)}
MakePRPlotGCT = function(SumTable, linewd, fat, siz)
{ggplot(SumTable, aes(CellType,Error)) +
geom_pointrange(aes(ymin=bot, ymax = top, color = Tool, y = Error, lwd = linewd, size = siz), fatten = fat, position = position_dodge(0.7)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
SCM = MakeSummTable(DataCellMix)
SPBMC = MakeSummTable(DataPBMC)
SStromal = MakeSummTable(DataStromal)
SFram = MakeSummTable(DataFram)
theme_set(theme_gray(base_size = 20))
MakePRPlotGCT(SCM, .01,1,1)
MakePRPlotGCT(SCM, 10,1,1)
MakePRPlotGCT(SCM, 10,1,10)
MakePRPlotGCT(SCM, .1,1,10)
MakePRPlotGCT(SCM, .1,1,.1)
View(SumTable)
View(MakeSummTable)
SCM = MakeSummTabel(DataCellMix)
SCM = MakeSummTable(DataCellMix)
View(SCM)
Dt = SCM[SCM$Tool == "dtangle"]
Dt = SCM[SCM$Tool == "dtangle",]
DtNeut = SCM[SCM$CellType == "Neutrophils",]
View(DtNeut)
DNTab = MakeSummTable(DtNeut)
View(DNTab)
View(DNTab)
View(DtNeut)
Dt = SCM[SCM$Tool == "dtangle"]
Dt = SCM[SCM$Tool == "dtangle",]
DtNeut = Dt[Dt$CellType == "Neutrophils",]
View(DtNeut)
Dt = DataCellMix[DataCellMix$Tool == "dtangle",]
DtNeut = Dt[Dt$CellType == "Neutrophils",]
DNTab = MakeSummTable(DtNeut)
View(DNTab)
View(DNTab)
View(Dt)
View(Dt)
View(DtNeut)
DtNeut$Error
View(DNTab)
View(MakeSummTable)
View(DNTab)
quantile(DtNeut$Error)
quantile(DtNeut$Error,c(.1,.9))
mean(DtNeut$Error)
